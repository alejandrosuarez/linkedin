stages:
- lint
- build
- test deploy
- deploy
- publish release

lint style:
  image: python:3.9.6-buster
  stage: lint
  before_script:
    - pip3 install poetry
    - poetry install
  script:
    - poetry check
    - poetry run black --check .
    - poetry run flake8
    - poetry run cicd/custom_style_check.py

lint typing:
  image: python:3.9.6-buster
  stage: lint
  allow_failure: true
  before_script:
    - pip3 install poetry
    - poetry install
  script:
    - poetry run mypy linkedin_matrix

generate docker requirements:
  image: python:3.9.6-buster
  stage: lint
  before_script:
    - pip3 install poetry
  script:
    - poetry export --without-hashes -E e2be -E images -E metrics | sed 's/==.*//g' > docker-requirements.txt
  artifacts:
    paths:
      - docker-requirements.txt
    expire_in: 14 days

build sdist and wheel:
  image: python:3.9.6-buster
  stage: build
  before_script:
    - pip3 install poetry
  script:
    - poetry build
  artifacts:
    paths:
      - dist/*
    expire_in: 14 days

build docker:
  image: docker:stable
  stage: build
  tags:
  - docker
  services:
    - docker:dind
  before_script:
  - apk add bash
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
  - docker pull $CI_REGISTRY_IMAGE:latest-amd64 || true
  - docker build --pull --cache-from $CI_REGISTRY_IMAGE:latest-amd64 --build-arg TARGETARCH=amd64 --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-amd64 .
  - ./cicd/docker-publish.sh
  - docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-amd64
  after_script:
  - |
    if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then
      apk add --update curl jq
      rm -rf /var/cache/apk/*
      jq -n \
         --arg password $BEEPER_DEV_ADMIN_NIGHTLY_PASS \
         --arg bridge $BEEPER_BRIDGE_TYPE \
         --arg image "${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}-amd64" \
         --arg channel STABLE \
         '
         {
           "password": $password,
           "bridge": $bridge,
           "image": $image,
           "channel": $channel
         }
         ' | curl "$BEEPER_DEV_ADMIN_API_URL" -H "Content-Type: application/json" -d @-
    fi

publish test:
  image: python:3.9.6-buster
  stage: test deploy
  only:
    - master
  before_script:
    - pip3 install poetry
    - mkdir -p ~/.config/pypoetry && cp $PYPI_DEPLOY_TOKEN ~/.config/pypoetry/auth.toml
  script:
    - poetry publish --dry-run

publish actual:
  image: python:3.9.6-buster
  stage: deploy
  only:
    variables:
      # Only actually publish if it's a version tag.
      - $CI_COMMIT_TAG =~ /^v.*/
  before_script:
    - pip3 install poetry
    - mkdir -p ~/.config/pypoetry && cp $PYPI_DEPLOY_TOKEN ~/.config/pypoetry/auth.toml
  script:
    - poetry publish

publish release:
  image: alpine:latest
  stage: publish release
  only:
    variables:
      # Only actually publish if it's a version tag.
      - $CI_COMMIT_TAG =~ /^v.*/
  before_script:
    - apk add curl jq bash
  script:
    - ./cicd/publish-gitlab-release.sh
